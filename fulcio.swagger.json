{
  "swagger": "2.0",
  "info": {
    "title": "Fulcio",
    "version": "3.0.0",
    "contact": {
      "name": "sigstore Fulcio project",
      "url": "https://github.com/sigstore/fulcio",
      "email": "sigstore-dev@googlegroups.com"
    },
    "license": {
      "name": "Apache License 2.0",
      "url": "https://github.com/sigstore/fulcio/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "CA"
    }
  ],
  "host": "fulcio.sigstore.dev",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v3/configuration": {
      "get": {
        "summary": "*\nReturns the configuration of supported OIDC issuers, including the required challenge for each issuer.",
        "operationId": "CA_GetConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3Configuration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "CA"
        ]
      }
    },
    "/api/v3/signingCert": {
      "post": {
        "summary": "*\nReturns an X.509 certificate created by the Fulcio certificate authority for the given request parameters",
        "operationId": "CA_CreateSigningCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3SigningCertificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateSigningCertificateRequest"
            }
          }
        ],
        "tags": [
          "CA"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v3Configuration": {
      "type": "object",
      "properties": {
        "issuers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3OIDCIssuer"
          },
          "description": "The OIDC issuers supported by this Fulcio instance."
        }
      },
      "description": "The configuration for the Fulcio instance."
    },
    "v3CreateSigningCertificateRequest": {
      "type": "object",
      "properties": {
        "oidcIdentityToken": {
          "type": "string",
          "title": "Identity information about who possesses the private / public key pair presented"
        },
        "certificateSigningRequest": {
          "type": "string",
          "format": "byte",
          "description": "Contains the public key to be stored in the requested certificate.\nCSR must be self-signed, as proof of possession of the private key.\nCSR's subject name must match the identity in the identity token.",
          "title": "PKCS#10 PEM-encoded certificate signing request"
        },
        "artifactDigest": {
          "type": "string",
          "format": "byte",
          "title": "Optional: Digest of to-be-signed artifact to bind the code signing certificate\nto a given artifact, to prevent credential reuse"
        },
        "hashSubject": {
          "type": "boolean",
          "title": "Optional: Whether or not to hash the identity in the subject alternative name\nOnly supported for email addresses"
        }
      },
      "required": [
        "oidcIdentityToken",
        "certificateSigningRequest"
      ]
    },
    "v3OIDCIssuer": {
      "type": "object",
      "properties": {
        "issuerUrl": {
          "type": "string",
          "description": "The URL of the OIDC issuer."
        },
        "wildcardIssuerUrl": {
          "type": "string",
          "description": "The URL of wildcard OIDC issuer, e.g. \"https://oidc.eks.*.amazonaws.com/id/*\".\nWhen comparing the issuer, the wildcards will be replaced by \"[-_a-zA-Z0-9]+\"."
        },
        "audience": {
          "type": "string",
          "description": "The expected audience of the OIDC token for the issuer."
        },
        "spiffeTrustDomain": {
          "type": "string",
          "description": "The expected SPIFFE trust domain. Only present when the OIDC issuer issues tokens for SPIFFE identities."
        },
        "issuerType": {
          "type": "string",
          "description": "The type of the IDP (e.g. \"email\", \"username\", etc.)."
        },
        "subjectDomain": {
          "type": "string",
          "description": "The expected subject domain. Only present when the OIDC issuer issues tokens for URI or username identities."
        }
      },
      "description": "Metadata about an OIDC issuer."
    },
    "v3SigningCertificate": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The certificate chain serialized with the leaf certificate first, followed\nby all intermediate certificates (if present), finishing with the root certificate.\n\nAll values are PEM-encoded certificates.\n\nThe leaf certificate contains an embedded Signed Certificate Timestamp (SCT) to\nverify inclusion of the certificate in a log. The SCT format is a SignedCertificateTimestampList,\nas defined in https://datatracker.ietf.org/doc/html/rfc6962#section-3.3"
        }
      }
    }
  },
  "externalDocs": {
    "description": "More about Fulcio",
    "url": "https://github.com/sigstore/fulcio"
  }
}
