//
// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package dev.sigstore.fulcio.v3;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/sigstore/fulcio/pkg/generated/protobuf";
option java_package = "dev.sigstore.fulcio.v3";
option java_multiple_files = true;
option java_outer_classname = "FulcioProto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Fulcio";
    version: "3.0.0";
    contact: {
      name: "sigstore Fulcio project";
      url: "https://github.com/sigstore/fulcio";
      email: "sigstore-dev@googlegroups.com";
    };
    license: {
      name: "Apache License 2.0";
      url: "https://github.com/sigstore/fulcio/blob/main/LICENSE";
    };
  };

  host: "fulcio.sigstore.dev";
  external_docs: {
    url: "https://github.com/sigstore/fulcio";
    description: "More about Fulcio";
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

// For Fulcio developers: All features should be designed with HTTP support in
// mind, since some clients may access this API over HTTP rather than gRPC.
//
// If there's a feature that you think would negatively impact the HTTP API,
// open an issue to discuss.

service CA {
    /**
     * Returns an X.509 certificate created by the Fulcio certificate authority for the given request parameters
     */
    rpc CreateSigningCertificate (CreateSigningCertificateRequest) returns (SigningCertificate){
        option (google.api.http) = {
          post: "/api/v3/signingCert"
          body: "*"
        };
    }

    /**
     * Returns the configuration of supported OIDC issuers, including the required challenge for each issuer.
     */
    rpc GetConfiguration (GetConfigurationRequest) returns (Configuration) {
        option (google.api.http) = {
          get: "/api/v3/configuration"
        };
    }
}

message CreateSigningCertificateRequest {
    /*
    * Identity information about who possesses the private / public key pair presented
    */
    string oidc_identity_token = 1 [(google.api.field_behavior) = REQUIRED];

    /*
    * PKCS#10 PEM-encoded certificate signing request
    *
    * Contains the public key to be stored in the requested certificate.
    * CSR must be self-signed, as proof of possession of the private key.
    * CSR's subject name must match the identity in the identity token.
    */
    bytes certificate_signing_request = 2 [(google.api.field_behavior) = REQUIRED];

    /*
    * Optional: Digest of to-be-signed artifact to bind the code signing certificate
    * to a given artifact, to prevent credential reuse
    */
    bytes artifact_digest = 3;

    /*
    * Optional: Whether or not to hash the identity in the subject alternative name
    * Only supported for email addresses
    */
    bool hash_subject = 4;
}

message SigningCertificate {
    /*
     * The certificate chain serialized with the leaf certificate first, followed
     * by all intermediate certificates (if present), finishing with the root certificate.
     *
     * All values are PEM-encoded certificates.
     *
     * The leaf certificate contains an embedded Signed Certificate Timestamp (SCT) to
     * verify inclusion of the certificate in a log. The SCT format is a SignedCertificateTimestampList,
     * as defined in https://datatracker.ietf.org/doc/html/rfc6962#section-3.3
     */
    repeated string certificates = 1;
}

// This is created for forward compatibility in case we want to add fields in the future.
message GetConfigurationRequest {
}

// The configuration for the Fulcio instance.
message Configuration {
    // The OIDC issuers supported by this Fulcio instance.
    repeated OIDCIssuer issuers = 1;
}

// Metadata about an OIDC issuer.
message OIDCIssuer {
    oneof issuer {
        // The URL of the OIDC issuer.
        string issuer_url = 1;
        // The URL of wildcard OIDC issuer, e.g. "https://oidc.eks.*.amazonaws.com/id/*".
        // When comparing the issuer, the wildcards will be replaced by "[-_a-zA-Z0-9]+".
        string wildcard_issuer_url = 2;
    }
    // The expected audience of the OIDC token for the issuer.
    string audience = 3;
    // The expected SPIFFE trust domain. Only present when the OIDC issuer issues tokens for SPIFFE identities.
    string spiffe_trust_domain = 4;
    // The type of the IDP (e.g. "email", "username", etc.).
    string issuer_type = 5;
    // The expected subject domain. Only present when the OIDC issuer issues tokens for URI or username identities.
    string subject_domain = 6;
}
